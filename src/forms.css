/* stylelint-disable selector-no-type, selector-no-combinator */
/**
 * Styles for HTML5 input and textarea elements. All form elements on Assembly's 6px baseline grid.
 * @section Forms
 */

.fieldset,
.input,
.select > select,
.textarea {
  appearance: none;
  background: var(--transparent);
  border: 0;
  margin: 0;
  padding: 0;
  box-shadow: none;
}

/**
 * The `input` class styles input types `text`, `password`, `email`,
 * `datetime`, `search`, `tel`, `url`, and `number`. The `textarea` class styles the `<textarea>` element.
 *
 * @section Inputs & textareas
 * @memberof Forms
 */
.input,
.textarea {
  border: 1px solid var(--blue);
  border-radius: var(--border-radius);
  display: inline-block;
  transition: background-color var(--transition), box-shadow var(--transition), border-color var(--transition);
}

.input:hover,
.textarea:hover,
.input:focus,
.textarea:focus {
  border-color: var(--blue-dark);
  outline: none;
}

.input:focus,
.textarea:focus {
  box-shadow: inset 0 0 0 3px var(--neutral25);
}

.input::placeholder,
.textarea::placeholder {
  color: var(--neutral45);
}

/* Remove bad padding and unique cancel button from IE and Safari inputs */
/* stylelint-disable selector-no-attribute */
.input::-ms-clear,
.input::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}
.input[type='search'] {
  appearance: textfield;
}
.input[type='search']::-webkit-search-decoration,
.input[type='search']::-webkit-search-cancel-button {
  appearance: none;
}
/* stylelint-enable selector-no-attribute */

/**
 * A basic text input. Set the color of the border with `input--border-{color}`.
 *
 * @memberof Inputs & textareas
 * @example
 * <input class='input' placeholder='basic' />
 * <input class='input input--border-teal' placeholder='basic' />
 */
.input {
  height: 36px;
  line-height: 34px; /* minus border */
  padding: 0 12px;
}

/**
 * Small input
 *
 * @memberof Inputs & textareas
 * @example
 * <input class='input input--s txt-s' placeholder='basic' />
 */
.input--s {
  height: 24px;
  line-height: 22px; /* minus border */
  padding: 0 6px;
}

/**
 * Textarea.
 *
 * @memberof Inputs & textareas
 * @example
 * <textarea placeholder='basic' class='textarea'></textarea>
 */
.textarea {
  resize: vertical;
  padding-top: 10px; /* minus border to match input */
  padding-bottom: 10px;
  padding-left: 10px;
  padding-right: 10px;
}

/**
 * Small textarea.
 *
 * @memberof Inputs & textareas
 * @example
 * <textarea class='textarea textarea--s txt-s'>small textarea</textarea>
 */
.textarea--s {
  padding: 0 4px;
}

/**
 * Disabled input and textarea.
 *
 * @memberof Inputs & textareas
 * @example
 * <input disabled class='input' placeholder='basic' />
 * <textarea disabled class='textarea' placeholder='basic' value='Disabled'>Disabled text</textarea>
 */
.input:disabled,
.textarea:disabled {
  pointer-events: none;
  color: var(--darken50) !important;
  background-color: var(--neutral10) !important;
  border-color: var(--neutral25) !important;
}

/* stylelint-disable selector-no-attribute */
/* Using the attribute selector instead of the pseudo-class `:read-only`
because it seems to be more cross-browser consistent with HTML5 input types */
/**
 * Read-only input and textarea.
 *
 * @memberof Inputs & textareas
 * @example
 * <input readonly class='input' placeholder='basic' value='Readonly' />
 * <textarea readonly class='textarea' placeholder='basic' value='Disabled' >Readonly text</textarea>
 */
.input[readonly],
.textarea[readonly] {
  background-color: var(--neutral10) !important;
}
/* stylelint-enable selector-no-attribute */

/**
 * The select component styles `<input type='select'>`. The markup must fit the following pattern:
 * - A wrapping `<div>` with the `select-container` class.
 * - A `<select>` element with the `select` class.
 * - A div with the `select-arrow` class.
 *
 * @section Selects
 * @memberof Forms
 */

/*
 * A select component. Vary color with the `.select--{color}` modifier.
 *
 * @memberof Selects
 * @group
 * @example
 * <div class='select-container'>
 *   <select class='select'>
 *     <option>one</option>
 *     <option>two</option>
 *   </select>
 *   <div class='select-arrow'></div>
 * </div>
 * <div class='select-container mt6'>
 *   <select class='select select--red'>
 *     <option>one</option>
 *     <option>two</option>
 *   </select>
 *   <div class='select-arrow'></div>
 * </div>
 */
.select-container {
  display: inline-flex;
  position: relative;
  color: var(--white);
  align-items: center;
}

.select {
  appearance: none;
  line-height: inherit;
  font-size: inherit;
  font-weight: bold;
  color: currentColor;
  padding: 4px 30px 4px 12px; /* plus arrow, minus border */
  cursor: pointer;
  display: inline-block;
  transition: box-shadow var(--transition), color var(--transition), background-color var(--transition);
  border-width: 2px;
  border-style: solid;
  border-color: transparent;
  border-radius: var(--border-radius);
  background-color: var(--blue); /* match btn default state */
}

.select-arrow {
  position: absolute;
  right: 12px;
  top: 50%;
  pointer-events: none;
  border-left: 4px solid transparent;
  border-right: 4px solid transparent;
  border-top: 6px solid currentColor;
  width: 8px;
  height: 8px;
  margin-top: -3px;
  transition: border-top-color var(--transition);
}

/** @endgroup */

/* default hover state */
.select:hover {
  background-color: var(--blue-dark);
}

/* Some browsers color the option text and background, so reset that */
.select option {
  background-color: var(--white);
  color: var(--text-color);
}

/* IE overrides */
.select::-ms-expand { display: none; }
/* IE actually colors the options, so they can't be white */
.select option { color: var(--text-color); }
/* Remove purple highlight in HC mode */
@media all and (-ms-high-contrast: active) {
  .select:focus::-ms-value {
    background-color: transparent;
    color: inherit;
  }
}
/* Remove blue highlight in Normal mode */
@media all and (-ms-high-contrast: none) {
  .select:focus::-ms-value {
    background-color: transparent;
    color: inherit;
  }
}
/* End IE overrides */

/**
 * A stroked select input. Depends on the `select` class.
 *
 * @memberof Selects
 * @example
 * <div class='select-container'>
 *   <select class='select select--stroke'>
 *     <option>one</option>
 *     <option>two</option>
 *   </select>
 *   <div class='select-arrow'></div>
 * </div>
 */
.select--stroke {
  color: var(--blue);
  background-color: transparent;
  border-color: currentColor;
}

.select--stroke + .select-arrow {
  border-top-color: var(--blue);
}

.select--stroke:hover {
  background-color: transparent;
  color: var(--blue-dark);
}

.select--stroke:hover + .select-arrow {
  border-top-color: var(--blue-dark);
}

/**
 * A small select input. Depends on the `select` class.
 *
 * @memberof Selects
 * @example
 * <div class='select-container'>
 *   <select class='select select--s'>
 *     <option>one</option>
 *     <option>two</option>
 *   </select>
 *   <div class='select-arrow'></div>
 * </div>
 */
.select--s {
  font-size: 12px;
  line-height: 20px;
  padding: 0 22px 0 12px; /* plus arrow */
}

.select--s + .select-arrow {
  right: 8px;
}

/**
 * A disabled select input.
 *
 * @memberof Selects
 * @example
 * <div class='select-container'>
 *   <select disabled class='select'>
 *     <option>one</option>
 *     <option>two</option>
 *   </select>
 *   <div class='select-arrow'></div>
 * </div>
 */
.select:disabled {
  pointer-events: none;
  color: var(--darken25) !important;
  background-color: var(--neutral25) !important;
  border-color: transparent !important;
}

.select:disabled + .select-arrow {
  border-top-color: var(--darken25);
}

/**
 * The `range` class styles `<input type='range'>`.
 *
 * @section Ranges
 * @memberof Forms
 */

/**
 *
 * A range element. Vary color with the `.range--{color}` modifier.
 *
 * @memberof Ranges
 * @example
 * <input class='range' type='range' />
*/
.range {
  appearance: none;
  width: 100%;
  padding: 0;
  margin: 0;
  border: 0;
  background: transparent;
}

/* range track */
.range::-webkit-slider-runnable-track {
  width: 100%;
  height: 4px;
  padding: 0;
  border: 0;
  border-radius: 2px;
  background: var(--blue);
  vertical-align: middle;
  cursor: pointer;
  box-shadow: 0;
}

.range::-moz-range-track {
  width: 100%;
  height: 3px;
  padding: 0;
  border: 0;
  border-radius: 2px;
  background: var(--blue);
  vertical-align: middle;
  cursor: pointer;
  box-shadow: 0;
}

.range::-ms-track { /* use fill-lower + fill-upper to set color */
  width: 100%;
  height: 3px;
  cursor: pointer;
  background: transparent;
  border-color: transparent;
  border-width: 12px 0;
  color: transparent;
}

.range::-ms-fill-lower {
  background: var(--blue);
  border: 0;
  box-shadow: 0;
}

.range::-ms-fill-upper {
  background: var(--blue);
  border: 0;
  box-shadow: 0;
}

/* range track:hover */
.range:hover::-webkit-slider-runnable-track { background: var(--blue-dark); }
.range:hover::-moz-range-track { background: var(--blue-dark); }
.range:hover::-ms-fill-upper { background: var(--blue-dark); }
.range:hover::-ms-fill-lower { background: var(--blue-dark); }

/* range thumb */
.range::-webkit-slider-thumb {
  appearance: none;
  box-shadow: 0;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--white);
  border: 2px solid var(--blue);
  cursor: pointer;
  margin-top: -8px;
}

.range::-moz-range-thumb {
  width: 17px;
  height: 17px;
  border-radius: 50%;
  background: var(--white);
  border: 2px solid var(--blue);
  cursor: pointer;
}

.range::-ms-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--white);
  border: 2px solid var(--blue);
  cursor: pointer;
}

/* range thumb:hover */
.range:hover::-webkit-slider-thumb { border-color: var(--blue-dark); }
.range:hover::-ms-thumb { border-color: var(--blue-dark); }
.range:hover::-moz-range-thumb { border-color: var(--blue-dark); }

/*
 * A small range element. Depends on the `range` class.
 *
 * @memberof Ranges
 * @selectors .range--s
 * @example
 * <input class='range range--s' type='range' />
*/

/* range small */
/* range small track */
.range--s::-webkit-slider-runnable-track { height: 2px; }
.range--s::-moz-range-track { height: 2px; }
.range--s::-ms-track { height: 2px; border-width: 9px 0; }

/* range small thumb */
.range--s::-webkit-slider-thumb {
  width: 15px;
  height: 15px;
  margin-top: -6.5px;
}

.range--s::-moz-range-thumb {
  width: 12px;
  height: 12px;
  margin-top: -7.5px;
}

.range--s::-ms-thumb {
  width: 15px;
  height: 15px;
}

/* Range focus */
.range:focus {
  outline: none;
}
.range:focus::-webkit-slider-thumb {
  transform: box-shadow var(--transition);
  box-shadow: 0 0 0 3px var(--neutral45);
}
.range:focus::-ms-fill-upper {
  transform: box-shadow var(--transition);
  box-shadow: 0 0 0 3px var(--neutral45);
}
.range:focus::-ms-fill-lower {
  transform: box-shadow var(--transition);
  box-shadow: 0 0 0 3px var(--neutral45);
}
.range:focus::-ms-thumb {
  transform: box-shadow var(--transition);
  box-shadow: 0 0 0 3px var(--neutral45);
}
.range:focus::-moz-range-thumb {
  transform: box-shadow var(--transition);
  box-shadow: 0 0 0 3px var(--neutral45);
}

.range::-moz-focus-outer { border: 0; }

/*
 * A disabled range element.
 *
 * @memberof Ranges
 * @selectors .range:disabled
 * @example
 * <input disabled class='range' type='range' />
*/
.range:disabled::-webkit-slider-runnable-track { background: var(--neutral45); }
.range:disabled::-moz-range-track { background: var(--neutral45); }
.range:disabled::-ms-fill-upper { background: var(--neutral45); }
.range:disabled::-ms-fill-lower { background: var(--neutral45); }

.range:disabled::-webkit-slider-thumb { border-color: var(--neutral45); background: var(--gray-faint); }
.range:disabled::-ms-thumb { border-color: var(--neutral45); background: var(--gray-faint); }
.range:disabled::-moz-range-thumb { border-color: var(--neutral45); background: var(--gray-faint); }

/* shared form styles */
.checkbox-container,
.switch-container,
.radio-container {
  user-select: none;
  display: inline-flex;
}

.toggle-container > input,
.checkbox-container > input,
.switch-container > input,
.radio-container > input {
  position: absolute;
  left: -9999px;
}

.checkbox,
.radio {
  cursor: pointer;
  top: 3px;
  flex-shrink: 0;
  width: 18px;
  height: 18px;
  border-radius: var(--border-radius);
  position: relative;
  border-width: 2px;
  border-style: solid;
  border-color: transparent;
  transition: box-shadow var(--transition), color var(--transition), background-color var(--transition);
}

/**
 * The checkbox component enhances the `<input type='checkbox'>` element. Markup must fit the following pattern:
 * - A wrapping `<label>` with the class `checkbox-container`.
 * - An `<input type='checkbox'>`. You may want to add a `mr*` margin-right
 *   class to separate the checkbox from its label.
 * - A `<div>` with the class `checkbox`
 *   containing an `<svg>` with the chosen icon.
 *
 * @section Checkboxes
 * @memberof Forms
 */

/*
 * A checkbox with a label. Change the color of the checkbox with `.checkbox--{color}`.
 * Adjust the line height of the checkbox with `.checkbox--s-label`.
 *
 * @memberof Checkboxes
 * @example
 *   <label class='checkbox-container'>
 *     <input type='checkbox'>
 *     <div class='checkbox mr6'>
 *       <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *     </div>
 *     More cats
 *   </label>
 *   <label class='txt-s checkbox-container ml24'>
 *     <input type='checkbox'>
 *     <div class='checkbox mr6 checkbox--s-label checkbox--red'>
 *       <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *     </div>
 *     More mice
 *   </label>
 */
.checkbox {
  background-color: #fff;
  color: var(--blue);
  border-color: currentColor;
}

.checkbox-container:hover > .checkbox {
  color: var(--blue-dark);
}

/* Ensure checkboxes inside buttons look nice */
.btn:not(.btn--stroke) > .checkbox {
  border-color: transparent;
  top: 0;
}

.checkbox > .icon {
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  /* Unchecked state */
  display: none;
}

/**
 * The radio component enhances the `<input type='radio'>` element. The radio markup must fit the following pattern:
 * - A wrapping `<label>` with the class `radio-container`.
 * - An `<input type='radio'>`. You may want to add a `mr*` margin-right
 *   class to separate the radio from its label.
 * - A `<div>` with the class `radio`.
 *
 * @section Radio buttons
 * @memberof Forms
 */

/**
 * A radio button. Change the color of the radio button with a `radio--{color}` class.
 * Adjust the line height of the radio button with `.radio--s-label`.
 *
 * @memberof Radio buttons
 * @example
 * <label class='radio-container'>
 *   <input name='radio-basic' type='radio'>
 *   <div class='radio mr6'></div>
 *   Orange
 * </label>
 * <label class='txt-s ml24 radio-container'>
 *   <input name='radio-basic' type='radio'>
 *   <div class='radio radio--s-label radio--yellow mr6'></div>
 *   Apple
 * </label>
 */
.radio {
  border-radius: 50%;
  color: var(--blue);
  border-color: currentColor;
}

.radio-container:hover > .radio {
  color: var(--blue-dark);
}

.radio::before {
  content: '';
  background-color: currentColor;
  border-radius: 50%;
  position: absolute;
  top: 2px;
  left: 2px;
  right: 2px;
  bottom: 2px;
  display: none;
}

/**
 * The switch component enhances the `<input type='checkbox'>`. The switch markup must fit the following pattern:
 * - A wrapping `<label>` with the class `switch-container`.
 * - An `<input type='checkbox'>`.
 * - A `<div>` with the class `switch`.
 *
 * @section Switches
 * @memberof Forms
 */

/**
 * A switch with on and off states. Modify the color of the dot when inactive, the border when inactive and
 * the background in active state with `switch--{color}`. Set the color of switch handle when switch is active with `switch--dot-{color}`.
 * @memberof Switches
 * @example
 * <label class="switch-container">
 *   <input type='checkbox'>
 *   <div class="switch"></div>
 * </label>
 * <label class="switch-container">
 *   <input type='checkbox'>
 *   <div class='switch switch--pink switch--dot-yellow mr6'></div>
 *   Enbabled
 * </label>
 */
.switch {
  top: 3px;
  flex-shrink: 0;
  position: relative;
  width: 30px;
  height: 18px;
  border-radius: 9999px;
  cursor: pointer;
  border-width: 2px;
  border-style: solid;
  border-color: currentColor;
  color: var(--blue);
  transition: box-shadow var(--transition), color var(--transition), background-color var(--transition), border-color var(--transition);
}

.switch::after {
  content: '';
  background-color: currentColor;
  position: absolute;
  display: block;
  border-radius: 50%;
  width: calc(50% - 3px);
  left: 2px;
  top: 2px;
  bottom: 2px;
  transition: left var(--transition), background-color var(--transition);
}

/*
 * The toggle group component enhances a set of `<input type=radio'>` inputs. Toggle markup must fit the following pattern:
 * - A wrapping `<div>` around all your radio options with the class `toggle-group`.
 * - A wrapping `<label>` around each radio option with the class `toggle-container`.
 * - An `<input type='radio'>`.
 * - A `<div>` with the class `toggle`.
 *
 * @section Toggle group
 * @memberof Forms
 */

/**
 * A toggle group. Modify the inactive toggle label text color, and the active toggle background color with `toggle--{color}`.
 * Modify the active label color with `toggle--active-{color}`. Modify the border radiuses of toggle groups inside small text with `toggle-group--s` on toggle group element.
 * @group
 * @memberof Toggle group
 * @example
 * <div class='toggle-group mr18'>
 *   <label class='toggle-container'>
 *     <input checked name='toggle' type='radio' />
 *     <div class='toggle'>cat</div>
 *   </label>
 *   <label class='toggle-container'>
 *     <input name='toggle' type='radio' />
 *     <div class='toggle'>dog</div>
 *   </label>
 * </div>
 * <div class='toggle-group txt-s mr18'>
 *   <label class='toggle-container'>
 *     <input checked name='toggle-2' type='radio' />
 *     <div class='toggle toggle--purple'>dragon</div>
 *   </label>
 *   <label class='toggle-container'>
 *     <input name='toggle-2' type='radio' />
 *     <div class='toggle toggle--purple'>phoenix</div>
 *   </label>
 * </div>
 */
.toggle-group {
  display: inline-flex;
  text-align: center;
  border-radius: 18px;
  padding: 6px;
}

.toggle {
  flex-shrink: 0;
  cursor: pointer;
  color: var(--blue);
  font-weight: bold;
  padding: 0 12px;
  border-radius: 13px;
  text-decoration: none !important; /* prevent underline when inside .prose */
  background-color: transparent;
  transition: color var(--transition), background-color var(--transition), box-shadow var(--transition);
}
/** @endgroup */

/*
 * A stroked toggle group
 *
 * @memberof Toggle group
 * @example
 * <div class='toggle-group toggle-group--stroke'>
 *   <label class='toggle-container'>
 *     <input checked name='stroked' type='radio' />
 *     <div class='toggle'>cat</div>
 *   </label>
 *   <label class='toggle-container'>
 *     <input checked  name='stroked' type='radio' />
 *     <div class='toggle'>dog</div>
 *   </label>
 * </div>
 */
.toggle-group--stroke {
  padding: 4px;
  border-width: 2px;
  border-style: solid;
  border-color: var(--blue);
}

/* Adjust border radiuses with small text – only necessary for vertical toggle groups */
.toggle-group--s {
  border-radius: 12px;
  padding: 3px;
}

.toggle-group--s.toggle-group--stroke {
  padding: 2px;
  line-height: 16px !important; /* align to baseline grid */
}

/* align labels with small text */
.switch--s-label,
.checkbox--s-label,
.radio--s-label {
  top: 0;
}

/* Shared focus states */
input:focus + .checkbox,
input:focus + .radio {
  outline: 0;
  box-shadow: var(--focus-shadow);
}

input:focus + .switch,
input:focus + .toggle,
.select--stroke:focus {
  outline: 0;
  box-shadow: var(--focus-shadow);
}

/* filled switches and selects need a border color instead of inner shadow */
.select:not(.select--stroke):focus,
input:checked:focus + .switch {
  outline: 0;
  border-color: var(--neutral45);
  box-shadow: var(--focus-shadow);
}

input:disabled {
  pointer-events: none;
}

/**
 * Disabled checkbox.
 *
 * @memberof Checkboxes
 * @selectors input:disabled + .checkbox
 * @example
 * <label class="checkbox-container mr6">
 *   <input disabled type='checkbox'>
 *   <div class='checkbox'>
 *     <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *   </div>
 * </label>
 * <label class="checkbox-container">
 *   <input checked disabled type='checkbox'>
 *   <div class='checkbox'>
 *     <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *   </div>
 * </label>
 */

/**
 * Disabled radio button.
 *
 * @memberof Radio buttons
 * @selectors input:disabled + .radio
 * @example
 * <label class='radio-container'>
 *   <input disabled type='radio'>
 *   <div class='radio'></div>
 * </label>
 * <label class='radio-container'>
 *   <input disabled checked type='radio'>
 *   <div class='radio'></div>
 * </label>
 */

/**
 * Disabled switch.
 *
 * @memberof Switches
 * @selectors input:disabled + .switch
 * @example
 * <label class="switch-container">
 *   <input disabled type='checkbox'>
 *   <div class="switch"></div>
 * </label>
 */

input:disabled + .checkbox,
input:disabled + .radio,
input:disabled + .switch {
  pointer-events: none;
  color: var(--darken25) !important;
  background-color: var(--neutral25) !important;
  border-color: transparent !important;
}

input:disabled + .switch::after {
  background-color: var(--darken25) !important;
}

/* State management for checkboxes and radio inputs */
input:checked + .checkbox > .icon {
  display: block;
}
input:checked + .radio::before {
  display: block;
}

input:checked + .checkbox,
input:checked + .radio {
  color: var(--blue-dark);
}

/* state management for switches */
.switch:hover {
  color: var(--blue-dark);
}

input:checked + .switch::after {
  left: calc(50% + 1px);
  background-color: var(--white);
}

input:checked + .switch {
  border-color: transparent;
  background-color: var(--blue-dark);
}

/* state management for toggles */
.toggle:hover {
  color: var(--blue-dark);
}

input:checked + .toggle {
  background: var(--blue);
  color: var(--white);
}

/**
 * Disabled toggle.
 *
 * @memberof Toggle group
 * @example
 * <div class='toggle-group'>
 *   <label class='toggle-container'>
 *     <input disabled name='pet' type='radio' />
 *     <div class='toggle'>cat</div>
 *   </label>
 *   <label class='toggle-container'>
 *     <input disabled checked name='pet' type='radio' />
 *     <div class='toggle'>dog</div>
 *   </label>
 * </div>
 */
input:disabled + .toggle {
  pointer-events: none;
  color: var(--darken25) !important;
  border-color: transparent !important;
}

input:checked:disabled + .toggle {
  background-color: var(--neutral25) !important;
  color: var(--darken25) !important;
}
