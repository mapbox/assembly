/* stylelint-disable selector-no-type, selector-no-combinator */
/**
 * Write an overview here.
 * @section Forms
 */

.fieldset,
.input,
.select > select,
.textarea {
  appearance: none;
  background: var(--white);
  border: 0;
  margin: 0;
  padding: 0;
  box-shadow: none;
}

.input,
.textarea {
  border: 1px solid var(--darken50);
  border-radius: var(--border-radius);
  display: inline-block;
  transition: box-shadow var(--transition), border-color var(--transition);
}

.input:focus,
.textarea:focus {
  box-shadow: 0 0 6px rgba(0, 0, 0, 0.22);
  border: 1px solid var(--darken50);
}

.input--no-shadow:focus,
.textarea--no-shadow:focus {
  box-shadow: none;
}

.input::placeholder {
  color: var(--darken25);
}

/**
 * Text input. The following modifiers are available:
 * - `input--s`: Small
 * - `input--dark`: Dark
 * - `input--no-shadow`: No shadow on focus
 *
 * Use `w*` width classes to change widths.
 *
 * @memberof Forms
 * @example
 * <input class='input' placeholder='basic' />
 * <input class='input input--s input--no-shadow' placeholder='small' />
 * <input class='input input--dark' placeholder='dark' />
 */
.input {
  height: 36px;
  line-height: 38px; /* minus border */
  padding: 0 12px;
}

.input--s {
  height: 24px;
  line-height: 24px; /* minus border */
  padding: 0 6px;
}

/**
 * Textarea. The following modifiers are available:
 * - `textarea--s`: Small
 * - `textarea--dark`: Dark
 * - `textarea--no-shadow`: No shadow on focus
 *
 * Use `w*` width classes to change widths.
 *
 * @memberof Forms
 * @example
 * <textarea class='textarea'>basic</textarea>
 * <textarea class='textarea textarea--s textarea--no-shadow'>small</textarea>
 * <textarea class='textarea textarea--dark'>dark</textarea>
 */
.textarea {
  resize: vertical;
  padding-top: 10px; /* minus border to match input */
  padding-bottom: 10px;
  padding-left: 10px;
  padding-right: 10px;
}

.textarea--s {
  padding-left: 10px;
  padding-right: 10px;
}

/* Dark */
.input--dark,
.textarea--dark {
  background-color: var(--darken75);
  color: var(--white);
}

.input--dark::placeholder,
.textarea--dark::placeholder {
  color: var(--lighten25);
}

/**
 * The select markup must fit the following pattern.
 * - A wrapping `<div>` with the class `select`.
 * - A `<select>`.
 *
 * Variations:
 * - Modify `.select` with `select--stroke`.
 * - Modify *non-stroke* `.select` with a `.bg-{color}` class.
 * - Modify *stroke* `.select` with a text color, e.g. `.color-red`.
 *
 * @memberof Forms
 * @example
 * <div class='select mb6'>
 *   <select>
 *     <option>one</option>
 *     <option>two</option>
 *     <option>three</option>
 *   </select>
 * </div>
 * <div class='select bg-red mb6'>
 *   <select>
 *     <option>one</option>
 *     <option>two</option>
 *     <option>three</option>
 *   </select>
 * </div>
 * <div class='select select--s bg-blue mb6'>
 *   <select>
 *     <option>one</option>
 *     <option>two</option>
 *     <option>three</option>
 *   </select>
 * </div>
 * <div class='select select--stroke color-purple'>
 *   <select>
 *     <option>one</option>
 *     <option>two</option>
 *     <option>three</option>
 *   </select>
 * </div>
 */
.select {
  position: relative;
  color: var(--white);
  border-radius: var(--border-radius);
  background-color: var(--blue); /* match btn default state */
  transition: color var(--transition), background-color var(--transition);
}

.select:not(.select--stroke):hover {
  background-color: var(--blue-dark);
}

/* Borders are on the select, but colors are applied
to the `.select` container. */
.select > select {
  font-size: inherit;
  line-height: inherit;
  display: block;
  border-width: 2px;
  border-style: solid;
  border-color: transparent;
  border-radius: var(--border-radius);
  color: currentColor;
  font-weight: bold;
  cursor: pointer;
  padding: 4px 30px 4px 12px; /* plus arrow, minus border */
  /* Needs to be on top of everything but transparent */
  position: relative;
  z-index: 2;
  background: transparent;
  width: 100%;
}

/* IE overrides */
.select > select::-ms-expand { display: none; }
/* IE actually colors the options, so they can't be white */
.select option { color: var(--text-color); }
/* Remove purple highlight in HC mode */
@media all and (-ms-high-contrast: active) {
  .select > select:focus::-ms-value {
    background-color: transparent;
    color: inherit;
  }
}
/* Remove blue highlight in Normal mode */
@media all and (-ms-high-contrast: none) {
  .select > select:focus::-ms-value {
    background-color: transparent;
    color: inherit;
  }
}
/* End IE overrides */

.select--stroke {
  color: var(--blue);
  background-color: transparent;
}

.select--stroke:hover {
  color: var(--blue-dark);
}

.select--stroke > select {
  border-color: currentColor;
}

.select--s > select {
  font-size: 12px;
  line-height: 20px;
  padding: 0 22px 0 12px; /* plus arrow */
}

.select::after {
  content: '';
  border-left: 4px solid transparent;
  border-right: 4px solid transparent;
  border-top: 6px solid currentColor;
  width: 8px;
  height: 8px;
  font-size: 0;
  line-height: 0;
  position: absolute;
  top: 50%;
  margin-top: -3px;
  right: 12px;
}

/* override the box-shadow reset for select elements */
.select > select:focus {
  box-shadow: 0 0 2px 2px var(--darken25);
}

.select--stroke::after {
  border-top-color: currentColor;
}

.select--s::after {
  right: 8px;
}

/* stylelint-disable selector-no-attribute */
/* bg- colors */
.select[class*='bg-']:not(.select--stroke),
.select[class*='bg-']:not(.select--stroke) > select {
  border-color: transparent;
  color: #fff;
}
.select[class*='bg-']:not(.select--stroke)::after {
  border-top-color: #fff;
}
/* stylelint-enable selector-no-attribute */

/* Color variations */
.select.bg-gray:hover { background-color: var(--gray-dark) !important; }
.select--stroke.color-gray:hover { color: var(--gray-dark) !important; }

.select.bg-pink:hover { background-color: var(--pink-dark) !important; }
.select--stroke.color-pink:hover { color: var(--pink-dark) !important; }

.select.bg-red:hover { background-color: var(--red-dark) !important; }
.select--stroke.color-red:hover { color: var(--red-dark) !important; }

.select.bg-orange:hover { background-color: var(--orange-dark) !important; }
.select--stroke.color-orange:hover { color: var(--orange-dark) !important; }

.select.bg-yellow:hover { background-color: var(--yellow-dark) !important; }
.select--stroke.color-yellow:hover { color: var(--yellow-dark) !important; }

.select.bg-green:hover { background-color: var(--green-dark) !important; }
.select--stroke.color-green:hover { color: var(--green-dark) !important; }

.select.bg-teal:hover { background-color: var(--teal-dark) !important; }
.select--stroke.color-teal:hover { color: var(--teal-dark) !important; }

.select.bg-blue:hover { background-color: var(--blue-dark) !important; }
.select--stroke.color-blue:hover { color: var(--blue-dark) !important; }

.select.bg-purple:hover { background-color: var(--purple-dark) !important; }
.select--stroke.color-purple:hover { color: var(--purple-dark) !important; }

/**
 * Range input. The following modifiers are available:
 * - `input--s`: Small
 * - `input--dark`: Dark
 *
 * Use `w*` width classes to change widths.
 *
 * @memberof Forms
 * @example
 * <div class='mb12'><label>Range <input class='range w96' type='range' /></label></div>
 * <div class='mb12'><label>Small range<input class='range range--s w96' type='range' /></label></div>
 * <div class='bg-gray-dark pl12 pr12 pt3 pb3 round color-white'><label>Dark range<input class='range range--dark w96' type='range' /></label</div>
*/
.range {
  appearance: none;
  padding: 7px 0; /* to increase click area for ranges */
  width: 100%;
  background: transparent;
  vertical-align: text-bottom;
}

/* range track */
.range::-webkit-slider-runnable-track {
  width: 100%;
  height: 4px;
  padding: 0;
  border: 0;
  border-radius: 2px;
  background: var(--gray-light);
  vertical-align: middle;
  cursor: pointer;
  box-shadow: 0;
}

.range::-moz-range-track {
  width: 100%;
  height: 3px;
  padding: 0;
  border: 0;
  border-radius: 2px;
  background: var(--gray-light);
  vertical-align: middle;
  cursor: pointer;
  box-shadow: 0;
}

.range::-ms-track { /* use fill-lower + fill-upper to set color */
  width: 100%;
  height: 3px;
  cursor: pointer;
  background: transparent;
  border-color: transparent;
  border-width: 12px 0;
  color: transparent;
}

.range::-ms-fill-lower {
  background: var(--gray-light);
  border: 0;
  box-shadow: 0;
}

.range::-ms-fill-upper {
  background: var(--gray-light);
  border: 0;
  box-shadow: 0;
}

/* range track:hover */
.range:hover::-webkit-slider-runnable-track { background: var(--blue); }
.range:hover::-moz-range-track { background: var(--blue); }
.range:hover::-ms-fill-upper { background: var(--blue); }
.range:hover::-ms-fill-lower { background: var(--blue); }

/* range thumb */
.range::-webkit-slider-thumb {
  appearance: none;
  box-shadow: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--gray-light);
  border: 0;
  cursor: pointer;
  margin-top: -8px;
}

.range::-moz-range-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--gray-light);
  border: 0;
  cursor: pointer;
  margin-top: -7.5px;
}

.range::-ms-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--gray-light);
  border: 0;
  cursor: pointer;
}

/* range thumb:hover */
.range:hover::-webkit-slider-thumb { transform: scale(1.25); background: var(--blue); }
.range:hover::-ms-thumb { transform: scale(1.25); background: var(--blue); }
.range:hover::-moz-range-thumb { transform: scale(1.25); background: var(--blue); }

/* range small */
.range--s { padding: 5px 0; }
/* range small track */
.range--s::-webkit-slider-runnable-track { height: 2px; }
.range--s::-moz-range-track { height: 2px; }
.range--s::-ms-track { height: 2px; border-width: 9px 0; }

/* range small thumb */
.range--s::-webkit-slider-thumb {
  width: 15px;
  height: 15px;
  margin-top: -6.5px;
}

.range--s::-ms-thumb {
  width: 15px;
  height: 15px;
}

.range--s::-moz-range-thumb {
  width: 13px;
  height: 13px;
  margin-top: -7.5px;
}

.range:focus { box-shadow: none; }
.range:focus::-webkit-slider-thumb { box-shadow: 0 0 2px 2px var(--darken25); }
.range:focus::-ms-thumb { box-shadow: 0 0 2px 2px var(--darken25); }
.range:focus::-moz-range-thumb { box-shadow: 0 0 2px 2px var(--darken25); }

/* range dark */
/* range dark track */
.range--dark::-webkit-slider-runnable-track { background: var(--gray); }
.range--dark::-moz-range-track { background: var(--gray); }
.range--dark::-ms-fill-lower { background: var(--gray); }
.range--dark::-ms-fill-upper { background: var(--gray); }

/* range dark thumb */
.range--dark::-webkit-slider-thumb { background: var(--gray); }
.range--dark::-ms-thumb { background: var(--gray); }
.range--dark::-moz-range-thumb { background: var(--gray); }

/* range dark thumb:hover */
.range--dark:hover::-webkit-slider-thumb { background: var(--gray-light); }
.range--dark:hover::-ms-thumb { background: var(--gray-light); }
.range--dark:hover::-moz-range-thumb { background: var(--gray-light); }

/* range dark track:hover */
.range--dark:hover::-webkit-slider-runnable-track { background: var(--gray-light); }
.range--dark:hover::-moz-range-track { background: var(--gray-light); }
.range--dark:hover::-ms-fill-lower { background: var(--gray-light); }
.range--dark:hover::-ms-fill-upper { background: var(--gray-light); }

/* range blue - example */
/* range blue track */
.range--blue::-webkit-slider-runnable-track { background: var(--blue); }
.range--blue::-moz-range-track { background: var(--blue); }
.range--blue::-ms-fill-lower { background: var(--blue); }
.range--blue::-ms-fill-upper { background: var(--blue); }

/* range blue thumb */
.range--blue::-webkit-slider-thumb { background: var(--blue); }
.range--blue::-ms-thumb { background: var(--blue); }
.range--blue::-moz-range-thumb { background: var(--blue); }

/* range blue track:hover */
.range--blue:hover::-webkit-slider-runnable-track { background: var(--blue-light); }
.range--blue:hover::-moz-range-track { background: var(--blue-light); }
.range--blue:hover::-ms-fill-lower { background: var(--blue-light); }
.range--blue:hover::-ms-fill-upper { background: var(--blue-light); }

/* range blue thumb:hover */
.range--blue:hover::-webkit-slider-thumb { background: var(--blue-light); }
.range--blue:hover::-ms-thumb { background: var(--blue-light); }
.range--blue:hover::-moz-range-thumb { background: var(--blue-light); }

/**
 * The checkbox markup must fit the following pattern.
 * - A wrapping `<label>` with the class `checkbox-container`.
 * - An `<input type='checkbox'>`. You may want to add a `mr*` margin-right
 *   class to separate the checkbox from its label.
 * - A `<div>` with the class `checkbox`
 *   containing an `<svg>` with the chosen icon.
 * - Text for the label.
 *
 * Variations:
 * - Modify `checkbox` with a text color, e.g. `color-red`.
 * - Use a different icon.
 * - Modify `checkbox` with `checkbox--s-label` if the text is small,
 *   for proper vertical alignment.
 *
 * The class `checkbox` and its modifiers can also be used independent
 * of a `<label>` and `<input>` if you are building a custom components.
 * In that case, apply the state class `is-active` when it should be checked.
 *
 * @section Checkboxes
 * @memberof Forms
 */

/*
 * @memberof Checkboxes
 * @example
 * <div>
 *   <label class='checkbox-container'>
 *     <input type='checkbox' value='magic'>
 *     <div class='checkbox mr6'>
 *       <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *     </div>
 *     More cats
 *   </label>
 * </div>
 * <div class='mb12'>
 *   <label class='checkbox-container mr12'>
 *     <input type='checkbox' value='magic'>
 *     <div class='checkbox mr6'>
 *       <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *     </div>
 *     Lorem ipsum dolor sit amet, consectetur adipisicing elit. Adipisci tenetur distinctio provident a, debitis obcaecati ipsam laborum autem suscipit natus repellendus nam cumque ab qui ducimus unde ratione, quisquam nisi.
 *   </label>
 * </div>
 * <div class='txt-s'>
 *   <label class='checkbox-container mr12'>
 *     <input type='checkbox' value='magic'>
 *     <div class='checkbox mr6 checkbox--s-label color-red'>
 *       <svg class='icon'><use xlink:href='#icon-check' /></svg>
 *     </div>
 *     More zebras
 *   </label>
 * </div>
 */

/**
 * The radio markup must fit the following pattern.
 * - A wrapping `<label>` with the class `radio-container`.
 * - An `<input type='radio'>`. You may want to add a `mr*` margin-right
 *   class to separate the radio from its label.
 * - A `<div>` with the class `radio`.
 * - Text for the label.
 *
 * Variations:
 * - Modify `radio` with a text color, e.g. `color-purple`.
 * - Modify `radio` with `radio--s-label` if the text is small,
 *   for proper vertical alignment.
 *
 * The class `radio` and its modifiers can also be used independent
 * of a `<label>` and `<input>` if you are building a custom components.
 * In that case, apply the state class `is-active` when it should be checked.
 *
 * @section Radio buttons
 * @memberof Forms
 */

/**
 * @memberof Radio buttons
 * @example
 * <div class='mb12'>
 *   <label class='radio-container mr12'>
 *     <input name='radio-basic' value='magic' type='radio'>
 *     <div class='radio mr6'></div>
 *     Option 1
 *   </label>
 * </div>
 * <div class='txt-s'>
 *   <label class='radio-container mr12'>
 *     <input name='radio-basic' value='magic' type='radio'>
 *     <div class='radio radio--s-label color-yellow mr6'></div>
 *     Magic radio
 *   </label>
 * </div>
 */

/**
 * The switch markup must fit the following pattern.
 *
 * Consists of
 * - A wrapping `<label>` with the class `switch-container`.
 * - An `<input type='checkbox'>`.
 * - A `<div>` with the class `switch`.
 *
 * Variations:
 * - Modify the active state of the switch handle with `switch--dot-{color}`.
 * - Modify the color of the dot when inactive, the border when inactive and the background in active state with `color--{color}`
 *
 * The class `switch` and its modifiers can also be used independent
 * of a `<label>` and `<input>` if you are building a custom components.
 * In that case, apply the state class `is-active` when it should be checked.
 *
 * @section Switches
 * @memberof Forms
 */

/**
 * @memberof Switches
 * @example
 * <div>
 *   <label class="switch-container mr12">
 *     <input type='checkbox' value='magic'>
 *     <div class="switch"></div>
 *   </label>
 * </div>
 * <div>
 *   <label class="switch-container">
 *     <input type='checkbox' value='magic'>
 *     <div class='switch border--pink color-gray mr12'></div>
 *     Switch this!
 *   </label>
 * </div>
 */

/**
 * The toggle is an alternative way to style a set of radio inputs. Toggle markup must fit the following pattern.
 *
 * Consists of
 * - A wrapping `<div>` around all your radio options with the class `toggle-group`.
 * - A wrapping `<label>` around each radio option with the class `toggle-container`.
 * - An `<input type='radio'>`.
 * - A `<div>` with the class `toggle`.
 *
 * Variations:
 * - Modify the inactive toggle label text color, and the active toggle background color with `toggle--{color}`.
 * - Modify the border radiuses of toggle groups inside small text with `toggle-group--s` on toggle group element.
 *
 * The Toggle component and its modifiers can be used independent
 * of a `<label>` and `<input>` if you are building a custom components.
 * In that case, apply the state class `is-active` to a `toggle` and it will appear active.
 *
 * @section Toggles
 * @memberof Forms
 */

/**
 * @memberof Toggles
 * @example
 * <div class='toggle-group mr18'>
 *   <label class='toggle-container'>
 *     <input name='pet' value='cat' type='radio' />
 *     <div class='toggle'>
 *     cat
 *     </div>
 *   </label>
 *   <label class='toggle-container'>
 *     <input name='pet' value='dog' type='radio' />
 *     <div class='toggle'>
 *     dog
 *     </div>
 *   </label>
 *   <label class='toggle-container'>
 *     <input name='pet' value='bird' type='radio' />
 *     <div class='toggle'>
 *     bird
 *     </div>
 *   </label>
 * </div>
 * <div class='toggle-group txt-s mr18'>
 *   <label class='toggle-container'>
 *     <input name='beast' value='cat' type='radio' />
 *     <div class='toggle toggle--purple'>
 *     dragon
 *     </div>
 *   </label>
 *   <label class='toggle-container'>
 *     <input name='beast' value='dog' type='radio' />
 *     <div class='toggle toggle--purple'>
 *     phoenix
 *     </div>
 *   </label>
 *   <label class='toggle-container'>
 *     <input name='beast' value='bird' type='radio' />
 *     <div class='toggle toggle--purple'>
 *     hydra
 *     </div>
 *   </label>
 * </div>
 * <div class='toggle-group'>
 *   <div class='toggle is-active'>
 *   cyrus
 *   </div>
 *   <div class='toggle'>
 *   steve
 *   </div>
 *   <div class='toggle'>
 *   penny
 *   </div>
 * </div>
 */

/* shared form styles */
.checkbox-container,
.switch-container,
.radio-container {
  user-select: none;
  display: inline-flex;
  cursor: pointer;
}

.toggle-container > input,
.checkbox-container > input,
.switch-container > input,
.radio-container > input {
  position: absolute;
  left: -9999px;
}

.checkbox,
.radio {
  top: 3px;
  flex-shrink: 0;
  width: 18px;
  height: 18px;
  border-radius: var(--border-radius);
  cursor: pointer;
  position: relative;
  border-width: 2px;
  border-style: solid;
  border-color: transparent;
  transition: color var(--transition), background-color var(--transition);
}

input:focus + .checkbox,
input:focus + .radio,
input:focus + .switch {
  box-shadow: 0 0 2px 2px var(--darken25);
}

/* Primary checkbox styles */
.checkbox {
  background-color: #fff;
  color: var(--blue);
  border-color: currentColor;
}

.checkbox-container:hover > .checkbox {
  color: var(--blue-dark);
}

/* Ensure checkboxes inside buttons look nice */
.btn:not(.btn--stroke) > .checkbox {
  border-color: transparent;
  top: 0;
}

.checkbox > .icon {
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  /* Unchecked state */
  display: none;
}

/* Primary radio styles */
.radio {
  border-radius: 50%;
  color: var(--blue);
  border-color: currentColor;
}

.radio-container:hover > .radio {
  color: var(--blue-dark);
}

.radio::before {
  content: '';
  background-color: currentColor;
  border-radius: 50%;
  position: absolute;
  top: 2px;
  left: 2px;
  right: 2px;
  bottom: 2px;
  display: none;
}

/* Primary switch styles */
.switch {
  top: 3px;
  flex-shrink: 0;
  position: relative;
  width: 30px;
  height: 18px;
  border-radius: 9999px;
  cursor: pointer;
  border-width: 2px;
  border-style: solid;
  border-color: currentColor;
  color: var(--blue);
  transition: color var(--transition), background-color var(--transition), border-color var(--transition);
}

.switch::after {
  content: '';
  background-color: currentColor;
  position: absolute;
  display: block;
  border-radius: 50%;
  width: calc(50% - 3px);
  left: 2px;
  top: 2px;
  bottom: 2px;
  transition: left var(--transition), background-color var(--transition);
}

/* Primary toggle styles */
.toggle-group {
  display: inline-flex;
  text-align: center;
  border-radius: 16px;
}

.toggle {
  flex-shrink: 0;
  cursor: pointer;
  color: var(--blue);
  font-weight: bold;
  margin: 2px;
  padding: 0 12px;
  border-radius: 13px;
  text-decoration: none !important; /* prevent underline when inside .prose */
  background-color: transparent;
  transition: color var(--transition), background-color var(--transition);
}

/* adjust border radiuses with small text */
.toggle-group--s {
  border-radius: 13px;
}

/* align labels with small text */
.switch--s-label,
.checkbox--s-label,
.radio--s-label {
  top: 0;
}

/* State management for checkboxes and radio inputs */
input:checked + .checkbox > .icon,
.checkbox.is-active > .icon {
  display: block;
}
input:checked + .radio::before,
.radio.is-active::before {
  display: block;
}

input:checked + .checkbox,
.checkbox.is-active,
input:checked + .radio,
.radio.is-active {
  color: var(--blue-dark);
}

/* state management for switches */
input:not(:checked) + .switch:not(.is-active):hover::after {
  background-color: var(--blue-dark);
}

.switch:hover {
  color: var(--blue-dark);
}

.is-active.switch::after,
input:checked + .switch::after {
  left: calc(50% + 1px);
  background-color: var(--white);
}

.is-active.switch,
input:checked + .switch {
  border-color: transparent !important;
  background-color: var(--blue-dark) !important;
}

/* state management for toggles */
input:not(:checked) + .toggle:not(.is-active):hover,
:not(input) + .toggle:not(.is-active):hover {
  color: var(--blue-dark) !important;
}

.toggle.is-active,
input:checked + .toggle {
  background: var(--blue) !important;
  color: var(--white);
}
