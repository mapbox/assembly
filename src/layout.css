/**
 * Define the size, shape, and content flow of your markup.
 *
 * @section Layout
 */

/*
 * All a limiter to a wrapping element around a page layout. The limiter should never be placed inside other elements that have layout classes. Unlike many other classes in Assembly, the limiter class includes built-in media queries, designed to manage line lengths across screen sizes. The limiter's max width is 1200px.
 *
 * @memberof Layout
 * @example
 * <div>
 *  <div class='limiter border border--darken10 h24'>
 *   limiter
 *  </div>
 * </div>
 */
.limiter {
  padding-left: 24px;
  padding-right: 24px;
  width: 100%;
}

@media (--m-screen) {
  .limiter {
    margin-left: auto;
    margin-right: auto;
    width: 91.666666666%;
    max-width: 1200px;
    padding-left: 0;
    padding-right: 0;
  }
}

@media (--l-screen) {
  .limiter {
    width: 83.33333333%;
  }
}

/**
 * Assembly uses a 12-column flexible grid with optional gutters.
 *
 * @section Grid
 * @memberof Layout
 */

/**
 * Grids require at minimum two elements: A parent with the class `grid` and a child with the class `col`. By default, each `col` in a grid will occupy equal space. The `grid` class includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * When using these classes, do not apply left or right margin or padding directly to the \`grid\` or \`col\` elements or you will face unexpected side-effects.
 *
 * @group
 * @memberof Grid
 * @example
 * <div class='grid'>
 *   <div class='col border border--darken10'>one</div>
 *   <div class='col border border--darken10'>two</div>
 *   <div class='col border border--darken10'>three</div>
 * </div>
 */
.grid {
  display: flex !important;
  flex-wrap: wrap !important;
}
.col {
  display: block;
  max-width: 100%;
  flex-basis: 0;
  flex-grow: 1;
  flex-shrink: 1;
}
/** @endgroup */

/**
 * Specify a percentage-based width for a `col` in a grid. `col` elements that do _not_ have `col--{size}`
 * modifiers but are siblings of `col`s that do have modifiers, will retain their default behavior by proportionally
 * occupying the remaining space. `col--{size}` classes include `*-mm`, `*-ml`, and `*-mxl` variations
 * to target screen sizes.
 *
 * @group
 * @memberof Grid
 * @example
 * <div class='grid mt12'>
 *   <div class='col border border--darken10'>col</div>
 *   <div class='col border border--darken10'>col</div>
 *   <div class='col col--6 border border--darken10'>col--6</div>
 * </div>
 * <div class='grid'>
 *   <div class='col col--2 border border--darken10'>col--2</div>
 *   <div class='col col--4 border border--darken10'>col--4</div>
 *   <div class='col col--6 border border--darken10'>col--6</div>
 * </div>
 */
.col--1 { flex: none; width: 08.3333% !important; }
.col--2 { flex: none; width: 16.6666% !important; }
.col--3 { flex: none; width: 25% !important; }
.col--4 { flex: none; width: 33.3333% !important; }
.col--5 { flex: none; width: 41.6666% !important; }
.col--6 { flex: none; width: 50% !important; }
.col--7 { flex: none; width: 58.3333% !important; }
.col--8 { flex: none; width: 66.6666% !important; }
.col--9 { flex: none; width: 75% !important; }
.col--10 { flex: none; width: 83.3333% !important; }
.col--11 { flex: none; width: 91.6666% !important; }
.col--12 { flex: none; width: 100% !important; }
/** @endgroup */

/**
 * Apply to a `col` element to override a`col--{size}` rule and take on default `col`,occupying equal space with other `col` siblings.
 * This class is designed to be used with `*-mm`, `*-ml`, and `*-mxl` variations
 * to target screen sizes.
 *
 * @memberof Grid
 * @example
 * <div class='grid'>
 *   <div class='col col--3 col--auto-ml border border--darken10'>col--3 col--auto-ml</div>
 *   <div class='col col--9 col--auto-ml border border--darken10'>col--9 col--auto-ml</div>
 * </div>
 */
.col--auto {
  width: auto !important;
  flex: auto;
}

/**
 * Apply a left offset to a grid column. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 *
 * @example
 * <div class='grid'>
 *   <div class='col col--6 col--offl6 border border--darken10'>col--6</div>
 * </div>
 * @memberof Grid
 * @group
 */
.col--offl1 { margin-left: 08.3333% !important; }
.col--offl2 { margin-left: 16.6666% !important; }
.col--offl3 { margin-left: 25% !important; }
.col--offl4 { margin-left: 33.3333% !important; }
.col--offl5 { margin-left: 41.6666% !important; }
.col--offl6 { margin-left: 50% !important; }
.col--offl7 { margin-left: 58.3333% !important; }
.col--offl8 { margin-left: 66.6666% !important; }
.col--offl9 { margin-left: 75% !important; }
.col--offl10 { margin-left: 83.3333% !important; }
.col--offl11 { margin-left: 91.6666% !important; }
.col--offl12 { margin-left: 100% !important; }
/** @endgroup */

/**
 * Apply a right offset to a grid column. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @example
 * <div class='grid'>
 *   <div class='col col--3 border border--darken10'>col--3</div>
 *   <div class='col col--6 col--offl3 border border--darken10'>col6 with offset</div>
 * </div>
 * @memberof Grid
 * @group
 */
.col--offr1 { margin-right: 08.3333% !important; }
.col--offr2 { margin-right: 16.6666% !important; }
.col--offr3 { margin-right: 25% !important; }
.col--offr4 { margin-right: 33.3333% !important; }
.col--offr5 { margin-right: 41.6666% !important; }
.col--offr6 { margin-right: 50% !important; }
.col--offr7 { margin-right: 58.3333% !important; }
.col--offr8 { margin-right: 66.6666% !important; }
.col--offr9 { margin-right: 75% !important; }
.col--offr10 { margin-right: 83.3333% !important; }
.col--offr11 { margin-right: 91.6666% !important; }
.col--offr12 { margin-right: 100% !important; }
/** @endgroup */

/**
 * Control the display style of elements.
 *
 * @section Display
 * @memberof Layout
 */

/**
 * Set an element's `display` property value. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @memberof Display
 * @group
 * @example
 * <div class="inline bg-darken10">inline</div>
 * <div class="block bg-darken10">block</div>
 * <div class="inline-block bg-darken10">inline-block</div>
 * <div class="none bg-darken10">none</div>
 */
.inline { display: inline !important; }
.block { display: block !important; }
.inline-block { display: inline-block !important; }
.none { display: none !important; }
/** @endgroup */

/**
 * Classes for basic positioning. For flexbox positioning rules, see the documentation for [flexbox](#Flexbox) utilities.
 *
 * @section Positioning
 * @memberof Layout
 */

/**
 * Set an element's `position` property value. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @group
 * @memberof Positioning
 * @example
 * <div class="relative">
 *   <div class="absolute bg-darken10 right">absolute</div>
 *   <div class="relative bg-darken10">relative</div>
 *   <div class="static bg-darken10">static</div>
 *   <!--
 *    Fixed positioning would interfere with page
 *    <div class="fixed bg-darken10">fixed</div>
 *   -->
 * </div>
 */
.fixed { position: fixed !important; }
.absolute { position: absolute !important; }
.relative { position: relative !important; }
.static { position: static !important; }
/** @endgroup */

/**
 * Pin a positioned element against a side of its container. Positioning classes can be combined to stretch elements across the top, bottom, left, or right sides of their container. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @group
 * @memberof Positioning
 * @example
  * <div class="relative h60">
 *   <div class="absolute bg-darken10 right">right</div>
 *   <div class="absolute bg-darken10 bottom">bottom</div>
 *   <div class="absolute bg-darken10 left">left</div>
 *   <div class="absolute bg-darken10 top left right align-center">top left right</div>
 * </div>
 */
.top { top: 0 !important; }
.right { right: 0 !important; }
.left { left: 0 !important; }
.bottom { bottom: 0 !important; }
/** @endgroup */

/**
 * Override default stacking order by setting an element's `z-index` property value. Whenever possible, rely on
 * built-in stacking order and avoid using these classes. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @group
 * @memberof Positioning
 * @example
 * <div class="relative h60">
 *   <div class="absolute z5 bg-pink py6 px6">z5</div>
 *   <div class="absolute z1 bg-blue px6 py6 mt12 ml24">z1</div>
 *   <div class="absolute z1-neg1 bg-blue px6 py6 mt24 ml60">z-neg1</div>
 * </div>
 */
.z-neg1 { z-index: -1 !important; }
.z0 { z-index: 0 !important; }
.z1 { z-index: 1 !important; }
.z2 { z-index: 2 !important; }
.z3 { z-index: 3 !important; }
.z4 { z-index: 4 !important; }
.z5 { z-index: 5 !important; }
/** @endgroup */

/**
 * Note: scale layout is autogenerated by build-layout-scales.js
 */

/**
 * All margin classes fit the following pattern: `m<side><size>`.
 * And all margin class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @section Margins
 * @memberof Layout
 */

/**
 * Set `auto` margins on left and right. This pattern is useful for horizontally centering block elements.
 *
 * @example
 * <div class='mx-auto w60 bg-darken10'>mx-auto</div>
 * @memberof Margins
 */
.mx-auto { margin-left: auto !important; margin-right: auto !important; }

/**
 * All padding classes fit the following pattern: `m<side><size>`.
 * And all padding class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @section Padding
 * @memberof Layout
 */

/**
 * All sizing classes fit the following pattern: `<w|h><min|max><size>` or `<w|h><min|max>-full` for `100%`.
 * And all sizing class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @section Sizing
 * @memberof Layout
 */

/**
 * Set a viewport-based height.
 *
 * @group
 * @memberof Sizing
 * @example
 * <div class='viewport-third bg-darken10'>viewport-third</div>
 */
.viewport-third { height: 33.3333vh !important; }
.viewport-half { height: 50vh !important; }
.viewport-twothirds { height: 66.6666vh !important; }
.viewport-almost { height: 90vh !important; }
.viewport-full { height: 100vh !important; }
/** @endgroup */

/**
 * Flexbox utilities. All class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * Usage must fit the following pattern:
 * - `flex-parent` rules control the parent container, while `flex-child` rules control the children.
 * - By default, the `main` axis is horizontal and the `cross` axis is vertical. The axes can be inverted with the use of `flex-parent--column`.
 * - To learn about how the flexbox system works, check out ["A Complete Guide to Flexbox"](https://css-tricks.com/snippets/css/a-guide-to-flexbox).
 *
 * @section Flexbox
 * @memberof Layout
 */

/**
 * Establish an element as a flex parent.
 * These classes allow the use of `flex-parent--*` modifiers, and `flex-child` classes on children.
 *
 * @group
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent'>flex-parent</div>
 * <div class='bg-darken10 flex-parent-inline'>flex-parent-inline</div>
 */
.flex-parent { display: flex !important; }
.flex-parent-inline { display: inline-flex !important; }
/** @endgroup */

/**
 * Set the direction of the main axis to top-to-bottom (default is left-to-right).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--column'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--column { flex-direction: column !important; }

/**
 * Set the direction of the main axis to bottom-to-top (default is left-to-right).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--column-reverse'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--column-reverse { flex-direction: column-reverse !important; }

/**
 * Set the direction of the main axis to left-to-right (the default value of `flex-parent`).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--row'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--row { flex-direction: row !important; }

/**
 * Set the direction of the main axis to right-to-left (default is left-to-right).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--row-reverse'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--row-reverse { flex-direction: row-reverse !important; }

/**
 * Center an element's children on the main axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-main bg-darken10'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--center-main { justify-content: center !important; }

/**
 * Center an element's children on the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-cross bg-darken10 h120'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--center-cross { align-items: center !important; }

/**
 * Align an element's children to the start of the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--start-cross h120 bg-darken10'>
 *  <div class='flex-child bg-darken10 h42'>child</div>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--start-cross { align-items: flex-start !important; }

/**
 * Align an element's children to the start of the main axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--start-main bg-darken10'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--start-main { justify-content: flex-start !important; }

/**
 * Align an element's children to the end of the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--end-cross h120 bg-darken10'>
 *  <div class='flex-child bg-darken10 h42'>child</div>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--end-cross { align-items: flex-end !important; }

/**
 * Align an element's children to the end of the main axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--end-main bg-darken10'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--end-main { justify-content: flex-end !important; }

/**
 * Allow children to wrap. By default, they are all forced onto one line.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--wrap bg-darken10 scroll-hidden'>
 *  <div class='flex-child bg-darken10 w600'>child</div>
 *  <div class='flex-child bg-darken10 w600'>child</div>
 * </div>
 */
.flex-parent--wrap { flex-wrap: wrap !important; }

/**
 * Stretch children to fill the parent container along the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--stretch-cross bg-darken10 h120'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--stretch-cross { align-items: stretch !important; }

/**
 * Evenly distribute children across the line, so first child is at the start
 * and last child is at the end.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--space-between-main bg-darken10 h120'>
 *  <div class='flex-child bg-darken10'>child</div>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--space-between-main { justify-content: space-between !important; }

/**
 * Establish an element as a flex child. This class mainly exists to anticipate certain bugs
 * and unexpected behaviors that can otherwise occur with flexbox (especially in IE).
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-main'>
 *   <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-child {
  display: block;
  max-width: 100%;
}
/* Specifically, the above addresses #1, #2, and #12 in https://github.com/philipwalton/flexbugs */

/**
 * Make a child to grow to fill whatever space is available in the main axis of the parent container.
 * This is useful when you have one or more elements of
 * fixed width, and another element that should take up the remaining space in the row.
 *
 * Typically, you will also want to apply the `flex-child--no-shrink` modifier to the element in the row with a fixed width.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent bg-darken10'>
 *  <div class='flex-child flex-child--no-shrink border w240'>child</div>
 *  <div class='flex-child flex-child--grow border'>child</div>
 * </div>
 */
.flex-child--grow {
  flex-grow: 1 !important;
  min-width: 0;
}

/**
 * Prevent a child from shrinking below its width value.
 *
 * By default, flex children (even with specified widths) will shrink as needed to accommodate sibling elements.
 * This class prevents that default shrinkage, forcing siblings to accommodate the parent's width.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent bg-darken10 w240'>
 *  <div class='flex-child flex-child--no-shrink border w120'>child</div>
 *  <div class='flex-child border w120'>child</div>
 *  <div class='flex-child border w120'>child</div>
 * </div>
 */
.flex-child--no-shrink {
  flex-shrink: 0 !important;
}

/* end flex */

/**
 * Extra layout utilities.
 *
 * @memberof Layout
 * @section Layout utils
 */

/**
 * Bleed utilities. Bleed classes allow an element inside a centered container to escape the container and meet the edge of the screen.
 * When using the bleed classes, consider adding the `.scroll-hidden` class on a parent element to prevent horizontal overflow.
 *
 * *Warning*: Bleeding elements will never bleed out to more than 50% of the viewport width.
 * So you should not make an element bleed to one side unless it's already on that half of
 * the screen.
 *
 * *Warning*: In Firefox, children with negative margins have different layout effects than in other browsers.
 * The bleed classes should only be used if the parent's width is stable, either because it is set or because other children determine it.
 *
 * Class set (except `clearfix`) includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 * These screen-size variants are best suited to *adding* the bleed, not *removing* it.
 * Be aware of the effects of the `unbleed` class: it resets `margin-left`, `margin-right`,
 * and `flex-grow`.
 *
 * @group
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--center-main scroll-hidden'>
 *   <div class='w240 px12 py12 bg-darken10'>
 *     <div class='bg-darken10 bleed-r'>Right bleed</div>
 *   </div>
 * </div>
 *
 * @memberof Layout utils
 */
.bleed {
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
}
.bleed-r {
  flex-grow: 1;
  margin-right: calc(50% - 50vw);
}
.bleed-l {
  flex-grow: 1;
  margin-left: calc(50% - 50vw);
}
.unbleed {
  flex-grow: 0;
  margin-left: 0;
  margin-right: 0;
}
/* @endgroup */

/**
 * Float utilities. Class set (except `clearfix`) includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @group
 * @memberof Layout utils
 * @example
 * <div class='clearfix'>
 *   <div class='fl bg-darken10'>left</div>
 * </div>
 * <div> with .clearfix </div>
 * <div class='fr bg-darken10'>right</div>
 * <div class='bg-darken10'> without .clearfix </div>
 * <div class='fl unfloat'>unfloat</div>
 */
.fl { float: left !important; }
.fr { float: right !important; }
.unfloat { float: none !important; }
.clearfix::after {
  content: '' !important;
  display: block !important;
  clear: both !important;
}
/** @endgroup */
