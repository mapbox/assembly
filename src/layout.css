/**
 * Define the size, shape, and content flow of your markup.
 *
 * @section Layout
 */

/**
 * Assembly uses a 12-column flexible grid with optional gutters.
 *
 * @section Grid
 * @memberof Layout
 */

/**
 * Grids are made by adding the `grid` class to a parent and `col col--{size}` classes to children. Column classes include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * Grids and their columns use margin and padding for layout, so you should not apply any other margin or padding to these elements. Instead, apply such styling to parent and child elements, and use these elements for the grid layout only.
 *
 * @group
 * @memberof Grid
 * @example
 * <div class='grid'>
 *   <div class='col col--2 border border--darken10'>col--2</div>
 *   <div class='col col--4 border border--darken10'>col--4</div>
 *   <div class='col col--6 border border--darken10'>col--6</div>
 * </div>
 */
.grid {
  display: flex !important;
  flex-wrap: wrap !important;
}

.col {
  display: block !important;
  max-width: 100%;
  flex-shrink: 0 !important;
  flex-basis: auto !important;
}

.col--1 { width: 08.3333% !important; }
.col--2 { width: 16.6666% !important; }
.col--3 { width: 25% !important; }
.col--4 { width: 33.3333% !important; }
.col--5 { width: 41.6666% !important; }
.col--6 { width: 50% !important; }
.col--7 { width: 58.3333% !important; }
.col--8 { width: 66.6666% !important; }
.col--9 { width: 75% !important; }
.col--10 { width: 83.3333% !important; }
.col--11 { width: 91.6666% !important; }
.col--12 { width: 100% !important; }
/** @endgroup */

@media (--m-screen) {
  .grid-mm {
    display: flex !important;
    flex-wrap: wrap !important;
  }

  .col--1-mm { width: 08.3333% !important; }
  .col--2-mm { width: 16.6666% !important; }
  .col--3-mm { width: 25% !important; }
  .col--4-mm { width: 33.3333% !important; }
  .col--5-mm { width: 41.6666% !important; }
  .col--6-mm { width: 50% !important; }
  .col--7-mm { width: 58.3333% !important; }
  .col--8-mm { width: 66.6666% !important; }
  .col--9-mm { width: 75% !important; }
  .col--10-mm { width: 83.3333% !important; }
  .col--11-mm { width: 91.6666% !important; }
  .col--12-mm { width: 100% !important; }
}

@media (--l-screen) {
  .grid-ml {
    display: flex !important;
    flex-wrap: wrap !important;
  }

  .col--1-ml { width: 08.3333% !important; }
  .col--2-ml { width: 16.6666% !important; }
  .col--3-ml { width: 25% !important; }
  .col--4-ml { width: 33.3333% !important; }
  .col--5-ml { width: 41.6666% !important; }
  .col--6-ml { width: 50% !important; }
  .col--7-ml { width: 58.3333% !important; }
  .col--8-ml { width: 66.6666% !important; }
  .col--9-ml { width: 75% !important; }
  .col--10-ml { width: 83.3333% !important; }
  .col--11-ml { width: 91.6666% !important; }
  .col--12-ml { width: 100% !important; }
}

@media (--xl-screen) {
  .grid-mxl {
    display: flex !important;
    flex-wrap: wrap !important;
  }

  .col--1-mxl { width: 08.3333% !important; }
  .col--2-mxl { width: 16.6666% !important; }
  .col--3-mxl { width: 25% !important; }
  .col--4-mxl { width: 33.3333% !important; }
  .col--5-mxl { width: 41.6666% !important; }
  .col--6-mxl { width: 50% !important; }
  .col--7-mxl { width: 58.3333% !important; }
  .col--8-mxl { width: 66.6666% !important; }
  .col--9-mxl { width: 75% !important; }
  .col--10-mxl { width: 83.3333% !important; }
  .col--11-mxl { width: 91.6666% !important; }
  .col--12-mxl { width: 100% !important; }
}

/**
 * Apply a left offset to a grid column. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @example
 * <div class='grid'>
 *   <div class='col col--6 col--offl6 border border--darken10'>col--6</div>
 * </div>
 * @memberof Grid
 * @group
 */
.col--offl1 { margin-left: 08.3333% !important; }
.col--offl2 { margin-left: 16.6666% !important; }
.col--offl3 { margin-left: 25% !important; }
.col--offl4 { margin-left: 33.3333% !important; }
.col--offl5 { margin-left: 41.6666% !important; }
.col--offl6 { margin-left: 50% !important; }
.col--offl7 { margin-left: 58.3333% !important; }
.col--offl8 { margin-left: 66.6666% !important; }
.col--offl9 { margin-left: 75% !important; }
.col--offl10 { margin-left: 83.3333% !important; }
.col--offl11 { margin-left: 91.6666% !important; }
.col--offl12 { margin-left: 100% !important; }
/** @endgroup */

@media (--m-screen) {
  .col--offl1-mm { margin-left: 08.3333% !important; }
  .col--offl2-mm { margin-left: 16.6666% !important; }
  .col--offl3-mm { margin-left: 25% !important; }
  .col--offl4-mm { margin-left: 33.3333% !important; }
  .col--offl5-mm { margin-left: 41.6666% !important; }
  .col--offl6-mm { margin-left: 50% !important; }
  .col--offl7-mm { margin-left: 58.3333% !important; }
  .col--offl8-mm { margin-left: 66.6666% !important; }
  .col--offl9-mm { margin-left: 75% !important; }
  .col--offl10-mm { margin-left: 83.3333% !important; }
  .col--offl11-mm { margin-left: 91.6666% !important; }
  .col--offl12-mm { margin-left: 100% !important; }
}

@media (--l-screen) {
  .col--offl1-ml { margin-left: 08.3333% !important; }
  .col--offl2-ml { margin-left: 16.6666% !important; }
  .col--offl3-ml { margin-left: 25% !important; }
  .col--offl4-ml { margin-left: 33.3333% !important; }
  .col--offl5-ml { margin-left: 41.6666% !important; }
  .col--offl6-ml { margin-left: 50% !important; }
  .col--offl7-ml { margin-left: 58.3333% !important; }
  .col--offl8-ml { margin-left: 66.6666% !important; }
  .col--offl9-ml { margin-left: 75% !important; }
  .col--offl10-ml { margin-left: 83.3333% !important; }
  .col--offl11-ml { margin-left: 91.6666% !important; }
  .col--offl12-ml { margin-left: 100% !important; }
}

@media (--xl-screen) {
  .col--offl1-mxl { margin-left: 08.3333% !important; }
  .col--offl2-mxl { margin-left: 16.6666% !important; }
  .col--offl3-mxl { margin-left: 25% !important; }
  .col--offl4-mxl { margin-left: 33.3333% !important; }
  .col--offl5-mxl { margin-left: 41.6666% !important; }
  .col--offl6-mxl { margin-left: 50% !important; }
  .col--offl7-mxl { margin-left: 58.3333% !important; }
  .col--offl8-mxl { margin-left: 66.6666% !important; }
  .col--offl9-mxl { margin-left: 75% !important; }
  .col--offl10-mxl { margin-left: 83.3333% !important; }
  .col--offl11-mxl { margin-left: 91.6666% !important; }
  .col--offl12-mxl { margin-left: 100% !important; }
}

/**
 * Apply a right offset to a grid column. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @example
 * <div class='grid'>
 *   <div class='col col--3 border border--darken10'>col--3</div>
 *   <div class='col col--6 col--offl3 border border--darken10'>col6 with offset</div>
 * </div>
 * @memberof Grid
 * @group
 */
.col--offr1 { margin-right: 08.3333% !important; }
.col--offr2 { margin-right: 16.6666% !important; }
.col--offr3 { margin-right: 25% !important; }
.col--offr4 { margin-right: 33.3333% !important; }
.col--offr5 { margin-right: 41.6666% !important; }
.col--offr6 { margin-right: 50% !important; }
.col--offr7 { margin-right: 58.3333% !important; }
.col--offr8 { margin-right: 66.6666% !important; }
.col--offr9 { margin-right: 75% !important; }
.col--offr10 { margin-right: 83.3333% !important; }
.col--offr11 { margin-right: 91.6666% !important; }
.col--offr12 { margin-right: 100% !important; }
/** @endgroup */

@media (--m-screen) {
  .col--offr1-mm { margin-right: 08.3333% !important; }
  .col--offr2-mm { margin-right: 16.6666% !important; }
  .col--offr3-mm { margin-right: 25% !important; }
  .col--offr4-mm { margin-right: 33.3333% !important; }
  .col--offr5-mm { margin-right: 41.6666% !important; }
  .col--offr6-mm { margin-right: 50% !important; }
  .col--offr7-mm { margin-right: 58.3333% !important; }
  .col--offr8-mm { margin-right: 66.6666% !important; }
  .col--offr9-mm { margin-right: 75% !important; }
  .col--offr10-mm { margin-right: 83.3333% !important; }
  .col--offr11-mm { margin-right: 91.6666% !important; }
  .col--offr12-mm { margin-right: 100% !important; }
}

@media (--l-screen) {
  .col--offr1-ml { margin-right: 08.3333% !important; }
  .col--offr2-ml { margin-right: 16.6666% !important; }
  .col--offr3-ml { margin-right: 25% !important; }
  .col--offr4-ml { margin-right: 33.3333% !important; }
  .col--offr5-ml { margin-right: 41.6666% !important; }
  .col--offr6-ml { margin-right: 50% !important; }
  .col--offr7-ml { margin-right: 58.3333% !important; }
  .col--offr8-ml { margin-right: 66.6666% !important; }
  .col--offr9-ml { margin-right: 75% !important; }
  .col--offr10-ml { margin-right: 83.3333% !important; }
  .col--offr11-ml { margin-right: 91.6666% !important; }
  .col--offr12-ml { margin-right: 100% !important; }
}

@media (--xl-screen) {
  .col--offr1-mxl { margin-right: 08.3333% !important; }
  .col--offr2-mxl { margin-right: 16.6666% !important; }
  .col--offr3-mxl { margin-right: 25% !important; }
  .col--offr4-mxl { margin-right: 33.3333% !important; }
  .col--offr5-mxl { margin-right: 41.6666% !important; }
  .col--offr6-mxl { margin-right: 50% !important; }
  .col--offr7-mxl { margin-right: 58.3333% !important; }
  .col--offr8-mxl { margin-right: 66.6666% !important; }
  .col--offr9-mxl { margin-right: 75% !important; }
  .col--offr10-mxl { margin-right: 83.3333% !important; }
  .col--offr11-mxl { margin-right: 91.6666% !important; }
  .col--offr12-mxl { margin-right: 100% !important; }
}

/**
 * Control the display style of elements.
 *
 * @section Display
 * @memberof Layout
 */

/**
 * Set an element's `display` property value. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @memberof Display
 * @group
 * @example
 * <div class="inline bg-darken10">inline</div>
 * <div class="block bg-darken10">block</div>
 * <div class="inline-block bg-darken10">inline-block</div>
 * <div class="none bg-darken10">none</div>
 */
.inline { display: inline !important; }
.block { display: block !important; }
.inline-block { display: inline-block !important; }
.none { display: none !important; }
/** @endgroup */

@media (--m-screen) {
  .inline-mm { display: inline !important; }
  .block-mm { display: block !important; }
  .inline-block-mm { display: inline-block !important; }
  .none-mm { display: none !important; }
}

@media (--l-screen) {
  .inline-ml { display: inline !important; }
  .block-ml { display: block !important; }
  .inline-block-ml { display: inline-block !important; }
  .none-ml { display: none !important; }
}

@media (--xl-screen) {
  .inline-mxl { display: inline !important; }
  .block-mxl { display: block !important; }
  .inline-block-mxl { display: inline-block !important; }
  .none-mxl { display: none !important; }
}

/**
 * Classes for basic positioning. For flexbox positioning rules, see the documentation for [flexbox](#Flexbox) utilities.
 *
 * @section Positioning
 * @memberof Layout
 */

/**
 * Set an element's `position` property value. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @group
 * @memberof Positioning
 * @example
 * <div class="relative">
 *   <div class="absolute bg-darken10 right">absolute</div>
 *   <div class="relative bg-darken10">relative</div>
 *   <div class="static bg-darken10">static</div>
 *   <!--
 *    Fixed positioning would interfere with page
 *    <div class="fixed bg-darken10">fixed</div>
 *   -->
 * </div>
 */
.fixed { position: fixed !important; }
.absolute { position: absolute !important; }
.relative { position: relative !important; }
.static { position: static !important; }
/** @endgroup */

@media (--m-screen) {
  .fixed-mm { position: fixed !important; }
  .absolute-mm { position: absolute !important; }
  .relative-mm { position: relative !important; }
  .static-mm { position: static !important; }
}

@media (--l-screen) {
  .fixed-ml { position: fixed !important; }
  .absolute-ml { position: absolute !important; }
  .relative-ml { position: relative !important; }
  .static-ml { position: static !important; }
}

@media (--xl-screen) {
  .fixed-mxl { position: fixed !important; }
  .absolute-mxl { position: absolute !important; }
  .relative-mxl { position: relative !important; }
  .static-mxl { position: static !important; }
}

/**
 * Pin a positioned element against a side of its container. Positioning classes can be combined to stretch elements across the top, bottom, left, or right sides of their container. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @group
 * @memberof Positioning
 * @example
  * <div class="relative h72">
 *   <div class="absolute bg-darken10 right">right</div>
 *   <div class="absolute bg-darken10 bottom">bottom</div>
 *   <div class="absolute bg-darken10 left">left</div>
 *   <div class="absolute bg-darken10 top left right align-center">top left right</div>
 * </div>
 */
.top { top: 0 !important; }
.right { right: 0 !important; }
.left { left: 0 !important; }
.bottom { bottom: 0 !important; }
/** @endgroup */

@media (--m-screen) {
  .top-mm { top: 0 !important; }
  .right-mm { right: 0 !important; }
  .left-mm { left: 0 !important; }
  .bottom-mm { bottom: 0 !important; }
}

@media (--l-screen) {
  .top-ml { top: 0 !important; }
  .right-ml { right: 0 !important; }
  .left-ml { left: 0 !important; }
  .bottom-ml { bottom: 0 !important; }
}

@media (--xl-screen) {
  .top-mxl { top: 0 !important; }
  .right-mxl { right: 0 !important; }
  .left-mxl { left: 0 !important; }
  .bottom-mxl { bottom: 0 !important; }
}

/**
 * Override default stacking order by setting an element's `z-index` property value. Whenever possible, rely on
 * built-in stacking order and avoid using these classes. Class set includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @group
 * @memberof Positioning
 * @example
 * <div class="relative h72">
 *   <div class="absolute z5 bg-pink p6">z5</div>
 *   <div class="absolute z1 bg-blue p6 mt12 ml24">z1</div>
 *   <div class="absolute z1-neg1 bg-teal p6 mt24 ml48">z-neg1</div>
 * </div>
 */
.z-neg1 { z-index: -1 !important; }
.z0 { z-index: 0 !important; }
.z1 { z-index: 1 !important; }
.z2 { z-index: 2 !important; }
.z3 { z-index: 3 !important; }
.z4 { z-index: 4 !important; }
.z5 { z-index: 5 !important; }
/** @endgroup */

@media (--m-screen) {
  .z-neg1-mm { z-index: -1 !important; }
  .z0-mm { z-index: 0 !important; }
  .z1-mm { z-index: 1 !important; }
  .z2-mm { z-index: 2 !important; }
  .z3-mm { z-index: 3 !important; }
  .z4-mm { z-index: 4 !important; }
  .z5-mm { z-index: 5 !important; }
}

@media (--l-screen) {
  .z-neg1-ml { z-index: -1 !important; }
  .z0-ml { z-index: 0 !important; }
  .z1-ml { z-index: 1 !important; }
  .z2-ml { z-index: 2 !important; }
  .z3-ml { z-index: 3 !important; }
  .z4-ml { z-index: 4 !important; }
  .z5-ml { z-index: 5 !important; }
}

@media (--xl-screen) {
  .z-neg1-mxl { z-index: -1 !important; }
  .z0-mxl { z-index: 0 !important; }
  .z1-mxl { z-index: 1 !important; }
  .z2-mxl { z-index: 2 !important; }
  .z3-mxl { z-index: 3 !important; }
  .z4-mxl { z-index: 4 !important; }
  .z5-mxl { z-index: 5 !important; }
}

/**
 * Note: scale layout is autogenerated by build-layout-scales.js
 */

/**
 * All margin classes fit the following pattern: `m<side><size>`.
 * And all margin class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @section Margins
 * @memberof Layout
 */

/**
 * Set `auto` margins on left and right. This pattern is useful for horizontally centering block elements.
 *
 * @example
 * <div class='mx-auto w72 bg-darken10'>mx-auto</div>
 * @memberof Margins
 */
.mx-auto { margin-left: auto !important; margin-right: auto !important; }

@media (--m-screen) {
  .mx-auto { margin-left: auto !important; margin-right: auto !important; }
}

@media (--l-screen) {
  .mx-auto { margin-left: auto !important; margin-right: auto !important; }
}

@media (--xl-screen) {
  .mx-auto { margin-left: auto !important; margin-right: auto !important; }
}

/**
 * All padding classes fit the following pattern: `m<side><size>`.
 * And all padding class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @section Padding
 * @memberof Layout
 */

/**
 * All sizing classes fit the following pattern: `<w|h><min|max><size>` or `<w|h><min|max>-full` for `100%`.
 * And all sizing class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @section Sizing
 * @memberof Layout
 */

/**
 * Set a viewport-based height.
 *
 * @group
 * @memberof Sizing
 * @example
 * <div class='viewport-third bg-darken10'>viewport-third</div>
 */
.viewport-third { height: 33.3333vh !important; }
.viewport-half { height: 50vh !important; }
.viewport-twothirds { height: 66.6666vh !important; }
.viewport-almost { height: 90vh !important; }
.viewport-full { height: 100vh !important; }
/** @endgroup */

@media (--m-screen) {
  .viewport-third-mm { height: 33.3333vh !important; }
  .viewport-half-mm { height: 50vh !important; }
  .viewport-twothirds-mm { height: 66.6666vh !important; }
  .viewport-almost-mm { height: 90vh !important; }
  .viewport-full-mm { height: 100vh !important; }
}

@media (--l-screen) {
  .viewport-third-ml { height: 33.3333vh !important; }
  .viewport-half-ml { height: 50vh !important; }
  .viewport-twothirds-ml { height: 66.6666vh !important; }
  .viewport-almost-ml { height: 90vh !important; }
  .viewport-full-ml { height: 100vh !important; }
}

@media (--xl-screen) {
  .viewport-third-mxl { height: 33.3333vh !important; }
  .viewport-half-mxl { height: 50vh !important; }
  .viewport-twothirds-mxl { height: 66.6666vh !important; }
  .viewport-almost-mxl { height: 90vh !important; }
  .viewport-full-mxl { height: 100vh !important; }
}

/**
 * Flexbox utilities. All class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * Usage must fit the following pattern:
 * - `flex-parent` rules control the parent container, while `flex-child` rules control the children.
 * - By default, the `main` axis is horizontal and the `cross` axis is vertical. The axes can be inverted with the use of `flex-parent--column`.
 * - To learn about how the flexbox system works, check out ["A Complete Guide to Flexbox"](https://css-tricks.com/snippets/css/a-guide-to-flexbox).
 *
 * @section Flexbox
 * @memberof Layout
 */

/**
 * Establish an element as a flex parent.
 * These classes allow the use of `flex-parent--*` modifiers, and `flex-child` classes on children.
 *
 * @group
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent'>flex-parent</div>
 * <div class='bg-darken10 flex-parent-inline'>flex-parent-inline</div>
 */
.flex-parent { display: flex !important; }
.flex-parent-inline { display: inline-flex !important; }
/** @endgroup */

/**
 * Set the direction of the main axis to top-to-bottom (default is left-to-right).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--column'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--column { flex-direction: column !important; }

/**
 * Center an element's children on the main axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-main bg-darken10'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--center-main { justify-content: center !important; }

/**
 * Center an element's children on the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-cross bg-darken10 h96'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--center-cross { align-items: center !important; }

/**
 * Justify an element's children to the end of the main axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--justify-end bg-darken10'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--justify-end { justify-content: flex-end !important; }

/**
 * Allow children to wrap. By default, they are all forced onto one line.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--wrap bg-darken10 clip'>
 *  <div class='flex-child bg-darken10 w480'>child</div>
 *  <div class='flex-child bg-darken10 w480'>child</div>
 * </div>
 */
.flex-parent--wrap { flex-wrap: wrap !important; }

/**
 * Stretch children to fill the parent container along the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--stretch-cross bg-darken10 h96'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--stretch-cross { align-items: stretch !important; }

/**
 * Establish an element as a flex child. This class mainly exists to anticipate certain bugs
 * and unexpected behaviors that can otherwise occur with flexbox (especially in IE).
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-main'>
 *   <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-child {
  display: block;
  max-width: 100%;
}
/* Specifically, the above addresses #1, #2, and #12 in https://github.com/philipwalton/flexbugs */

/**
 * Make a child to grow to fill whatever space is available in the main axis of the parent container.
 * This is useful when you have one or more elements of
 * fixed width, and another element that should take up the remaining space in the row.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent bg-darken10'>
 *  <div class='flex-child border w240'>child</div>
 *  <div class='flex-child flex-child--grow border'>child</div>
 * </div>
 */
.flex-child--grow {
  flex-grow: 1 !important;
  min-width: 0;
}

@media (--m-screen) {
  .flex-parent-mm { display: flex !important; }
  .flex-parent-inline-mm { display: inline-flex !important; }
  .flex-parent--column-mm { flex-direction: column !important; }
  .flex-parent--wrap-mm { flex-wrap: wrap !important; }
  .flex-parent--justify-end-mm { justify-content: flex-end !important; }
  .flex-parent--center-main-mm { justify-content: center !important; }
  .flex-parent--center-cross-mm { align-items: center !important; }
  .flex-parent--stretch-cross-mm { align-items: stretch !important; }
  .flex-child-mm {
    display: block;
    max-width: 100%;
  }
  .flex-child--grow-mm {
    flex-grow: 1 !important;
    min-width: 0;
  }
}

@media (--l-screen) {
  .flex-parent-ml { display: flex !important; }
  .flex-parent-inline-ml { display: inline-flex !important; }
  .flex-parent--column-ml { flex-direction: column !important; }
  .flex-parent--wrap-ml { flex-wrap: wrap !important; }
  .flex-parent--justify-end-ml { justify-content: flex-end !important; }
  .flex-parent--center-main-ml { justify-content: center !important; }
  .flex-parent--center-cross-ml { align-items: center !important; }
  .flex-parent--stretch-cross-ml { align-items: stretch !important; }
  .flex-child-ml {
    display: block;
    max-width: 100%;
  }
  .flex-child--grow-ml {
    flex-grow: 1 !important;
    min-width: 0;
  }
}

@media (--xl-screen) {
  .flex-parent-mxl { display: flex !important; }
  .flex-parent-inline-mxl { display: inline-flex !important; }
  .flex-parent--column-mxl { flex-direction: column !important; }
  .flex-parent--wrap-mxl { flex-wrap: wrap !important; }
  .flex-parent--justify-end-mxl { justify-content: flex-end !important; }
  .flex-parent--center-main-mxl { justify-content: center !important; }
  .flex-parent--center-cross-mxl { align-items: center !important; }
  .flex-parent--stretch-cross-mxl { align-items: stretch !important; }
  .flex-child-mxl {
    display: block;
    max-width: 100%;
  }
  .flex-child--grow-mxl {
    flex-grow: 1 !important;
    min-width: 0;
  }
}
/* end flex */

/**
 * Extra layout utilities.
 *
 * @memberof Layout
 * @section Layout utils
 */

/**
 * Bleed utilities. Bleed classes allow an element inside a centered container to escape the container and meet the edge of the screen.
 * When using the bleed classes, consider adding the `.clip` class on a parent element to prevent horizontal overflow.
 *
 * *Warning*: In Firefox, children with negative margins have different layout effects than in other browsers.
 * The bleed classes should only be used if the parent's width is stable, either because it is set or because other children determine it.
 *
 * @group
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--center-main clip'>
 *   <div class='w180 p12 bg-darken10'>
 *     <div class='bg-darken10 bleed-r'>Right bleed</div>
 *   </div>
 * </div>
 *
 * @memberof Layout utils
 */
.bleed {
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
}
.bleed-r {
  flex-grow: 1;
  margin-right: calc(50% - 50vw);
}
.bleed-l {
  flex-grow: 1;
  margin-left: calc(50% - 50vw);
}
/* @endgroup */

/**
 * Float utilities. Class set (except `clearfix`) includes `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * @group
 * @memberof Layout utils
 * @example
 * <div class='clearfix'>
 *   <div class='fl bg-darken10'>left</div>
 * </div>
 * <div> with .clearfix </div>
 * <div class='fr bg-darken10'>right</div>
 * <div class='bg-darken10'> without .clearfix </div>
 * <div class='fl unfloat'>unfloat</div>
 */
.fl { float: left !important; }
.fr { float: right !important; }
.unfloat { float: none !important; }
.clearfix::after {
  content: '' !important;
  display: block !important;
  clear: both !important;
}
/** @endgroup */

@media (--m-screen) {
  .fl-mm { float: left !important; }
  .fr-mm { float: right !important; }
  .unfloat-mm { float: none !important; }
}

@media (--l-screen) {
  .fl-ml { float: left !important; }
  .fr-ml { float: right !important; }
  .unfloat-ml { float: none !important; }
}

@media (--xl-screen) {
  .fl-mxl { float: left !important; }
  .fr-mxl { float: right !important; }
  .unfloat-mxl { float: none !important; }
}
